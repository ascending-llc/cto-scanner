{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prowler-postgresql
  labels:
    {{- include "prowler-api.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  serviceName: {{ include "prowler-api.fullname" . }}-postgresql
  replicas: 1
  selector:
    matchLabels:
      {{- include "prowler-api.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        {{- include "prowler-api.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgresql
        image: {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
        imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.existingSecret }}
              key: {{ .Values.postgresql.auth.secretKeys.adminUsernameKey }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.existingSecret }}
              key: {{ .Values.postgresql.auth.secretKeys.adminPasswordKey }}
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.existingSecret }}
              key: {{ .Values.postgresql.auth.secretKeys.databaseKey }}
        - name: POSTGRES_PORT
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.existingSecret }}
              key: {{ .Values.postgresql.auth.secretKeys.portKey }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - name: postgresql
          containerPort: {{ include "prowler-api.postgresql.port" . | int }}
          protocol: TCP
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U "{{ .Values.postgresql.auth.username }}" -d "{{ .Values.postgresql.auth.database }}" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U "{{ .Values.postgresql.auth.username }}" -d "{{ .Values.postgresql.auth.database }}" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: dshm
          mountPath: /dev/shm
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: {{ .Values.postgresql.persistence.subPath | default "" }}
        {{- if .Values.postgresql.config }}
        - name: config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        {{- end }}
        resources:
          {{- toYaml .Values.postgresql.resources | nindent 10 }}
      volumes:
      - name: dshm
        emptyDir:
          medium: Memory
      {{- if .Values.postgresql.config }}
      - name: config
        configMap:
          name: {{ include "prowler-api.fullname" . }}-config
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - {{ .Values.postgresql.persistence.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.postgresql.persistence.size | quote }}
      {{- if .Values.postgresql.persistence.storageClass }}
      {{- if (eq "-" .Values.postgresql.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.postgresql.persistence.storageClass | quote }}
      {{- end }}
      {{- end }}
{{- end }}
